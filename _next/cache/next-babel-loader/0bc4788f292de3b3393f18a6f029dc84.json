{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from \"fs\";\nimport path from \"path\";\nimport recursive from \"recursive-readdir\";\nimport matter from \"gray-matter\";\nimport remark from \"remark\";\nimport html from \"remark-html\";\nconst postsDirectory = path.join(process.cwd(), \"content\");\nexport function getContent() {\n  const fileNames = walkSync(postsDirectory.concat(\"/\"));\n  const allPostsData = fileNames.map(fileName => {\n    // Remove \".md\" from file name to get id\n    const id = fileName.replace(/\\.md$/, \"\");\n    const id2 = id.replace(postsDirectory, \"\"); //console.log(id);\n    //const data = getContentData(id);\n\n    return id2;\n  });\n  return allPostsData;\n}\n\nconst walkSync = function (dir, filelist) {\n  var fs = fs || require(\"fs\"),\n      files = fs.readdirSync(dir);\n\n  filelist = filelist || [];\n  files.forEach(function (file) {\n    if (fs.statSync(dir + file).isDirectory()) {\n      filelist = walkSync(dir + file + \"/\", filelist);\n    } else {\n      //console.log(dir + file);\n      filelist.push(dir + file);\n    }\n  });\n  return filelist;\n};\n\nexport async function getContentData(id) {\n  const fullPath = path.join(postsDirectory, `${id}.md`); //console.log(fullPath);\n\n  const fileContents = fs.readFileSync(fullPath, \"utf8\"); // Use gray-matter to parse the post metadata section\n\n  const matterResult = matter(fileContents); // Use remark to convert markdown into HTML string\n\n  const processedContent = await remark().use(html).process(matterResult.content);\n  const contentHtml = processedContent.toString(); // Combine the data with the id and contentHtml\n\n  return _objectSpread({\n    id,\n    contentHtml\n  }, matterResult.data);\n}","map":{"version":3,"sources":["/home/alkatraz/Desktop/programs/PROJECT/Portfolio/lib/content.js"],"names":["fs","path","recursive","matter","remark","html","postsDirectory","join","process","cwd","getContent","fileNames","walkSync","concat","allPostsData","map","fileName","id","replace","id2","dir","filelist","require","files","readdirSync","forEach","file","statSync","isDirectory","push","getContentData","fullPath","fileContents","readFileSync","matterResult","processedContent","use","content","contentHtml","toString","data"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,SAAP,MAAsB,mBAAtB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AAEA,MAAMC,cAAc,GAAGL,IAAI,CAACM,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,SAAzB,CAAvB;AAEA,OAAO,SAASC,UAAT,GAAsB;AAC3B,QAAMC,SAAS,GAAGC,QAAQ,CAACN,cAAc,CAACO,MAAf,CAAsB,GAAtB,CAAD,CAA1B;AAEA,QAAMC,YAAY,GAAGH,SAAS,CAACI,GAAV,CAAeC,QAAD,IAAc;AAC/C;AACA,UAAMC,EAAE,GAAGD,QAAQ,CAACE,OAAT,CAAiB,OAAjB,EAA0B,EAA1B,CAAX;AACA,UAAMC,GAAG,GAAGF,EAAE,CAACC,OAAH,CAAWZ,cAAX,EAA2B,EAA3B,CAAZ,CAH+C,CAI/C;AACA;;AACA,WAAOa,GAAP;AACD,GAPoB,CAArB;AASA,SAAOL,YAAP;AACD;;AAED,MAAMF,QAAQ,GAAG,UAAUQ,GAAV,EAAeC,QAAf,EAAyB;AACxC,MAAIrB,EAAE,GAAGA,EAAE,IAAIsB,OAAO,CAAC,IAAD,CAAtB;AAAA,MACEC,KAAK,GAAGvB,EAAE,CAACwB,WAAH,CAAeJ,GAAf,CADV;;AAEAC,EAAAA,QAAQ,GAAGA,QAAQ,IAAI,EAAvB;AACAE,EAAAA,KAAK,CAACE,OAAN,CAAc,UAAUC,IAAV,EAAgB;AAC5B,QAAI1B,EAAE,CAAC2B,QAAH,CAAYP,GAAG,GAAGM,IAAlB,EAAwBE,WAAxB,EAAJ,EAA2C;AACzCP,MAAAA,QAAQ,GAAGT,QAAQ,CAACQ,GAAG,GAAGM,IAAN,GAAa,GAAd,EAAmBL,QAAnB,CAAnB;AACD,KAFD,MAEO;AACL;AACAA,MAAAA,QAAQ,CAACQ,IAAT,CAAcT,GAAG,GAAGM,IAApB;AACD;AACF,GAPD;AAQA,SAAOL,QAAP;AACD,CAbD;;AAeA,OAAO,eAAeS,cAAf,CAA8Bb,EAA9B,EAAkC;AACvC,QAAMc,QAAQ,GAAG9B,IAAI,CAACM,IAAL,CAAUD,cAAV,EAA2B,GAAEW,EAAG,KAAhC,CAAjB,CADuC,CAEvC;;AACA,QAAMe,YAAY,GAAGhC,EAAE,CAACiC,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAArB,CAHuC,CAKvC;;AACA,QAAMG,YAAY,GAAG/B,MAAM,CAAC6B,YAAD,CAA3B,CANuC,CAQvC;;AACA,QAAMG,gBAAgB,GAAG,MAAM/B,MAAM,GAClCgC,GAD4B,CACxB/B,IADwB,EAE5BG,OAF4B,CAEpB0B,YAAY,CAACG,OAFO,CAA/B;AAGA,QAAMC,WAAW,GAAGH,gBAAgB,CAACI,QAAjB,EAApB,CAZuC,CAavC;;AACA;AACEtB,IAAAA,EADF;AAEEqB,IAAAA;AAFF,KAGKJ,YAAY,CAACM,IAHlB;AAKD","sourcesContent":["import fs from \"fs\";\nimport path from \"path\";\nimport recursive from \"recursive-readdir\";\nimport matter from \"gray-matter\";\nimport remark from \"remark\";\nimport html from \"remark-html\";\n\nconst postsDirectory = path.join(process.cwd(), \"content\");\n\nexport function getContent() {\n  const fileNames = walkSync(postsDirectory.concat(\"/\"));\n\n  const allPostsData = fileNames.map((fileName) => {\n    // Remove \".md\" from file name to get id\n    const id = fileName.replace(/\\.md$/, \"\");\n    const id2 = id.replace(postsDirectory, \"\");\n    //console.log(id);\n    //const data = getContentData(id);\n    return id2;\n  });\n\n  return allPostsData;\n}\n\nconst walkSync = function (dir, filelist) {\n  var fs = fs || require(\"fs\"),\n    files = fs.readdirSync(dir);\n  filelist = filelist || [];\n  files.forEach(function (file) {\n    if (fs.statSync(dir + file).isDirectory()) {\n      filelist = walkSync(dir + file + \"/\", filelist);\n    } else {\n      //console.log(dir + file);\n      filelist.push(dir + file);\n    }\n  });\n  return filelist;\n};\n\nexport async function getContentData(id) {\n  const fullPath = path.join(postsDirectory, `${id}.md`);\n  //console.log(fullPath);\n  const fileContents = fs.readFileSync(fullPath, \"utf8\");\n\n  // Use gray-matter to parse the post metadata section\n  const matterResult = matter(fileContents);\n\n  // Use remark to convert markdown into HTML string\n  const processedContent = await remark()\n    .use(html)\n    .process(matterResult.content);\n  const contentHtml = processedContent.toString();\n  // Combine the data with the id and contentHtml\n  return {\n    id,\n    contentHtml,\n    ...matterResult.data,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}