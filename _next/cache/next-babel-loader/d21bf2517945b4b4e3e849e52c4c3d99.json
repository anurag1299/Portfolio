{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from \"fs\";\nimport path from \"path\";\nimport recursive from \"recursive-readdir\";\nimport matter from \"gray-matter\";\nimport remark from \"remark\";\nimport html from \"remark-html\";\nconst postsDirectory = path.join(process.cwd(), \"content\");\nexport function getContent() {\n  const fileNames = walkSync(postsDirectory.concat(\"/\"));\n  const allPostsData = fileNames.map(fileName => {\n    // Remove \".md\" from file name to get id\n    const id = fileName.replace(/\\.md$/, \"\");\n    const id2 = id.replace(postsDirectory, \"\"); //console.log(id);\n    //const data = getContentData(id);\n\n    return id2;\n  });\n  return allPostsData;\n}\n\nconst walkSync = function (dir, filelist) {\n  var fs = fs || require(\"fs\"),\n      files = fs.readdirSync(dir);\n\n  filelist = filelist || [];\n  files.forEach(function (file) {\n    if (fs.statSync(dir + file).isDirectory()) {\n      filelist = walkSync(dir + file + \"/\", filelist);\n    } else {\n      //console.log(dir + file);\n      filelist.push(dir + file);\n    }\n  });\n  return filelist;\n};\n\nexport async function getContentData(id) {\n  const fullPath = path.join(postsDirectory, `${id}.md`); //console.log(fullPath);\n\n  const fileContents = fs.readFileSync(fullPath, \"utf8\"); // Use gray-matter to parse the post metadata section\n\n  const matterResult = matter(fileContents); // Use remark to convert markdown into HTML string\n\n  const processedContent = await remark().use(html).process(matterResult.content);\n  const contentHtml = processedContent.toString(); // Combine the data with the id and contentHtml\n\n  return _objectSpread({\n    id,\n    contentHtml\n  }, matterResult.data);\n}","map":null,"metadata":{},"sourceType":"module"}